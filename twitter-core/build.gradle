/*
 * Copyright (C) 2015 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

apply plugin: 'com.android.library'

android {
    compileSdkVersion rootProject.compileSdkVersion

    defaultConfig {
        versionCode 1
        versionName '3.3.0'
        minSdkVersion rootProject.minSdkVersion
        consumerProguardFiles 'proguard.txt'
    }

    buildTypes {
        debug {
            buildConfigField "String", "GROUP", "\"${pom_group_id}\""
            buildConfigField "String", "ARTIFACT_ID", "\"${pom_artifact_id}\""
            buildConfigField "String", "BUILD_NUMBER", "\"${buildNumber}\""
            buildConfigField "String", "VERSION_NAME", "\"3.3.0\""
            buildConfigField "long", "BUILD_TIME", "${System.currentTimeMillis()}L"

        }

        release {
            buildConfigField "String", "GROUP", "\"${pom_group_id}\""
            buildConfigField "String", "ARTIFACT_ID", "\"${pom_artifact_id}\""
            buildConfigField "String", "BUILD_NUMBER", "\"${buildNumber}\""
            buildConfigField "long", "BUILD_TIME", "${System.currentTimeMillis()}L"
            buildConfigField "String", "VERSION_NAME", "\"3.3.0\""
        }
    }

    lintOptions {
        warningsAsErrors true
    }

    compileOptions {
        sourceCompatibility rootProject.sourceCompatibilityVersion
        targetCompatibility rootProject.targetCompatibilityVersion
    }
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.2.0'
    api 'com.squareup.retrofit2:retrofit:2.9.0'
    api 'com.squareup.retrofit2:converter-gson:2.9.0'
    api 'com.google.code.gson:gson:2.8.6'
    // define a BOM and its version
    api(platform("com.squareup.okhttp3:okhttp-bom:4.9.1"))
    // define any required OkHttp artifacts without version
    api("com.squareup.okhttp3:okhttp")

    compileOnly 'com.github.hyhyhykw:hawk:2.1.1'
    compileOnly 'com.github.Blankj.AndroidUtilCode:utilcode:1.30.0'
//    androidTestCompile dependency.mockito
//    androidTestCompile dependency.dexmakerMockito
//
//    testCompile dependency.mockito
//    testCompile dependency.junit
//    testCompile dependency.retrofitMock
//    testCompile(dependency.robolectric) {
//        exclude group: 'commons-logging', module: 'commons-logging'
//        exclude group: 'org.apache.httpcomponents', module: 'httpclient'
//    }
//    testCompile dependency.equalsVerifier
}



apply plugin: 'com.github.dcendents.android-maven' // 添加这个
group='com.github.hyhyhykw'	// 指定group，com.github.<用户名>


// 指定编码
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

// 打包源码
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs

    archiveClassifier.set('sources')
//    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    failOnError  false
    source = android.sourceSets.main.java.sourceFiles
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.compile
}

// 制作文档(Javadoc)
task javadocJar(type: Jar, dependsOn: javadoc) {
//    classifier = 'javadoc'
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}